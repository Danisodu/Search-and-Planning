(load "C:/Users/X541U/OneDrive/IST/Search-and-Planning/G008.lisp")

;(sucessors (create-state (list (create-shift '((L1 L1 0 0)))) '((L1 L1 0 4)(L1 L2 5 10))))
(defun printStatesShifts (lista)
    (print lista)
    (loop for state in lista do
        (print "State")
        (loop for shift in (state-shifts state) do
            (print shift)
        )))

(let ( (res1)
       (res2)
       (res3)
       (res4)
       (res5)
       (res6)
       (res7)
       (res8))

  (setf res1 (can-lunch (create-shift '((L1 L1 0 20) (L2 L3 40 480))))
        res2 (can-lunch (create-shift '((L2 L1 40 50)(L1 L2 50 241))))
        res3 (can-lunch (create-shift '((L1 L1 40 50)(L1 L2 50 241))))
        res4 (can-lunch (create-shift '((L1 L1 0 20)(L1 L2 60 480))))
        res5 (sucessors (create-state (list (create-shift '((L1 L1 40 60))))
                                      '((L1 L1 0 40))))
        res6 (sucessors (create-state (list (create-shift '((L1 L1 40 60))))
                                      '((L1 L2 0 40))))
        res7 (sucessors (create-state (list (create-shift '((L1 L1 40 300)(L2 L3 400 450))))
                                      '((L2 L2 300 400)))))

        (print (eq res1 nil))
        (print (eq res2 nil))
        (print res3)
        (print res4)
        (print res5)
        (print res6)
        (print res7)
)
